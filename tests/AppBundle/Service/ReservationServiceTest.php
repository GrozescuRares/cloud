<?php
/**
 * Created by PhpStorm.
 * User: intern
 * Date: 24.09.2018
 * Time: 14:13
 */

namespace Tests\AppBundle\Service;

use AppBundle\Adapter\ReservationAdapter;
use AppBundle\Entity\Reservation;
use AppBundle\Entity\User;
use AppBundle\Enum\EntityConfig;
use AppBundle\Enum\RepositoryConfig;
use AppBundle\Enum\UserConfig;
use AppBundle\Exception\ReservationNotFoundException;
use AppBundle\Helper\GetEntitiesAndDtosHelper;
use AppBundle\Service\ReservationService;

/**
 * Class ReservationServiceTest
 */
class ReservationServiceTest extends EntityManagerMock
{
    /** @var ReservationAdapter | \PHPUnit_Framework_MockObject_MockObject */
    protected $reservationAdapterMock;
    /** @var GetEntitiesAndDtosHelper | \PHPUnit_Framework_MockObject_MockObject */
    protected $getEntitiesAndDtosHelperMock;
    /** @var ReservationService */
    protected $reservationService;

    /**
     * ReservationServiceTest constructor.
     * @param array  $repositories
     * @param null   $name
     * @param array  $data
     * @param string $dataName
     */
    public function __construct(
        array $repositories = [EntityConfig::RESERVATION => RepositoryConfig::RESERVATION_REPOSITORY],
        $name = null,
        array $data = [],
        $dataName = ''
    ) {
        parent::__construct($repositories, $name, $data, $dataName);
    }

    /**
     * Sets up data
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->reservationAdapterMock = $this->createMock(ReservationAdapter::class);
        $this->getEntitiesAndDtosHelperMock = $this->createMock(GetEntitiesAndDtosHelper::class);
        $this->reservationService = new ReservationService($this->emMock, $this->reservationAdapterMock, $this->getEntitiesAndDtosHelperMock);
    }

    /**
     * tests that a client can delete a booking
     */
    public function testSuccessfullyDeleteBookingByClient()
    {
        $client = $this->createMock(User::class);
        $client->expects($this->once())
            ->method('getRoles')
            ->willReturn([UserConfig::ROLE_CLIENT]);

        $reservationMock = $this->createMock(Reservation::class);

        $this->getEntitiesAndDtosHelperMock->expects($this->once())
            ->method('getReservationById')
            ->with(1)
            ->willReturn($reservationMock);

        $reservationMock->expects($this->once())
            ->method('getUser')
            ->willReturn($client);
        $reservationMock->expects($this->once())
            ->method('setDeletedAt');

        $this->emMock->expects($this->once())
            ->method('persist')
            ->with($reservationMock);
        $this->emMock->expects($this->once())
            ->method('flush');

        $this->reservationService->deleteBooking($client, 1);
    }

    /**
     * tests that client can not delete other clients reservation
     */
    public function testThatClientCanNotDeleteOtherClientsReservation()
    {
        $this->expectException(ReservationNotFoundException::class);

        $client = $this->createMock(User::class);
        $client->expects($this->once())
            ->method('getRoles')
            ->willReturn([UserConfig::ROLE_CLIENT]);

        $reservationMock = $this->createMock(Reservation::class);

        $this->getEntitiesAndDtosHelperMock->expects($this->once())
            ->method('getReservationById')
            ->with(1)
            ->willReturn($reservationMock);

        $reservationMock->expects($this->once())
            ->method('getUser')
            ->willReturn($this->createMock(User::class));
        $reservationMock->expects($this->never())
            ->method('setDeletedAt');

        $this->emMock->expects($this->never())
            ->method('persist')
            ->with($reservationMock);
        $this->emMock->expects($this->never())
            ->method('flush');

        $this->reservationService->deleteBooking($client, 1);
    }
}
