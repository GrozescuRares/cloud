<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Hotel;
use AppBundle\Entity\User;
use AppBundle\Enum\PaginationConfig;
use AppBundle\Enum\UserConfig;
use AppBundle\Exception\UserNotFoundException;

use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\Exception\BadCredentialsException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository implements UserLoaderInterface
{
    /**
     * @param string $username
     *
     * @return mixed|null|\Symfony\Component\Security\Core\User\UserInterface
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function loadUserByUsername($username)
    {
        $qb = $this->createQueryBuilder('u');
        $qb
            ->where('u.username = :username')
            ->andWhere($qb->expr()->isNull('u.deletedAt'))
            ->setParameter('username', $username);

        $user = $qb->getQuery()->getOneOrNullResult();
        if (!$user instanceof User) {
            throw new UserNotFoundException('Bad credentials !');
        }
        if (!$user->isActivated()) {
            throw new BadCredentialsException('This account is not active !');
        }

        return $user;
    }

    /**
     * @param User $loggedUser
     * @return int
     */
    public function getUsersPagesNumberFromManagerHotel(User $loggedUser)
    {
        $qb = $this->createQueryBuilder('user');
        $qb ->where('user.hotel = :managerHotel')
            ->andWhere('user.userId != :managerId')
            ->andWhere($qb->expr()->isNull('user.deletedAt'))
            ->setParameter('managerHotel', $loggedUser->getHotel())
            ->setParameter('managerId', $loggedUser->getUserId());

        return ceil(count($qb->getQuery()->getResult()) / PaginationConfig::ITEMS);
    }

    /**
     * @param User  $loggedUser
     * @param mixed $offset
     * @param mixed $column
     * @param mixed $sort
     *
     * @return array
     */
    public function paginateAndSortUsersFromManagerHotel(User $loggedUser, $offset, $column, $sort)
    {
        $qb = $this->createQueryBuilder('user');
        $qb
            ->innerJoin('user.role', 'role')
            ->where('user.hotel = :managerHotel')
            ->andWhere('user.userId != :managerId')
            ->andWhere($qb->expr()->isNull('user.deletedAt'))
            ->setParameter('managerHotel', $loggedUser->getHotel())
            ->setParameter('managerId', $loggedUser->getUserId())
            ->setMaxResults(PaginationConfig::ITEMS)
            ->setFirstResult($offset);

        if ($column == 'role') {
            $qb->orderBy('role.description', $sort);

            return $qb->getQuery()->getResult();
        }
        if (!empty($column) and !empty($sort)) {
            $qb->orderBy('user.'.$column, $sort);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * @param User  $loggedUser
     * @param mixed $hotelId
     *
     * @return int
     */
    public function getUsersPagesNumberFromOwnerHotel(User $loggedUser, $hotelId)
    {
        $qb = $this->createQueryBuilder('user');
        $qb
            ->innerJoin('user.hotel', 'hotel')
            ->where('hotel.owner = :owner')
            ->andWhere('hotel.hotelId = :hotelId')
            ->andWhere($qb->expr()->isNull('user.deletedAt'))
            ->setParameter('owner', $loggedUser)
            ->setParameter('hotelId', $hotelId);

        return ceil(count($qb->getQuery()->getResult()) / PaginationConfig::ITEMS);
    }

    /**
     * @param User  $loggedUser
     * @param mixed $offset
     * @param mixed $column
     * @param mixed $sort
     * @param mixed $hotelId
     *
     * @return array
     */
    public function paginateAndSortUsersFromOwnerHotel(User $loggedUser, $offset, $column, $sort, $hotelId)
    {
        $qb = $this->createQueryBuilder('user');
        $qb
            ->innerJoin('user.hotel', 'hotel')
            ->innerJoin('user.role', 'role')
            ->where('hotel.owner = :owner')
            ->andWhere('hotel.hotelId = :hotelId')
            ->andWhere($qb->expr()->isNull('user.deletedAt'))
            ->setParameter('owner', $loggedUser)
            ->setParameter('hotelId', $hotelId)
            ->setFirstResult($offset)
            ->setMaxResults(PaginationConfig::ITEMS);

        if ($column == 'role') {
            $qb->orderBy('role.description', $sort);

            return $qb->getQuery()->getResult();
        }

        if (!empty($column) && !empty($sort)) {
            $qb->orderBy('user.'.$column, $sort);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * @param Hotel $hotel
     * @return array
     */
    public function getNumberOfEmployeesByHotel(Hotel $hotel)
    {
        $qb = $this->createQueryBuilder('user');
        $qb
            ->select('COUNT(user)')
            ->innerJoin('user.role', 'role')
            ->where('user.hotel = :hotel')
            ->andWhere('role.description != :client')
            ->andWhere('role.description != :owner')
            ->andWhere($qb->expr()->isNull('user.deletedAt'))
            ->setParameter('hotel', $hotel)
            ->setParameter('client', UserConfig::ROLE_CLIENT)
            ->setParameter('owner', UserConfig::ROLE_OWNER);

        return $qb->getQuery()->getResult();
    }
}
