<?php

namespace AppBundle\Repository;

use AppBundle\Entity\User;
use AppBundle\Exception\UserNotFoundException;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\Exception\BadCredentialsException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository implements UserLoaderInterface
{
    /**
     * @param string $username
     *
     * @return mixed|null|\Symfony\Component\Security\Core\User\UserInterface
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function loadUserByUsername($username)
    {
        $user = $this->createQueryBuilder('u')
            ->where('u.username = :username')
            ->setParameter('username', $username)
            ->getQuery()
            ->getOneOrNullResult();

        if (!$user instanceof User) {
            throw new UserNotFoundException('Bad credentials !');
        }
        if (!$user->isActivated()) {
            throw new BadCredentialsException('This account is not active !');
        }

        return $user;
    }

    /**
     * @param User $loggedUser
     * @return int
     */
    public function getUsersPagesNumberFromManagerHotel(User $loggedUser)
    {
        $usersCount = $this->createQueryBuilder('user')
            ->where('user.hotel = :managerHotel')
            ->setParameter('managerHotel', $loggedUser->getHotel())
            ->getQuery()->execute();

        return ceil(count($usersCount) / 5);
    }

    /**
     * @param User  $loggedUser
     * @param mixed $offset
     * @param mixed $column
     * @param mixed $sort
     *
     * @return array
     */
    public function paginateAndSortUsersFromManagerHotel(User $loggedUser, $offset, $column, $sort)
    {
        $users = $this->createQueryBuilder('user')
            ->where('user.hotel = :managerHotel')
            ->setParameter('managerHotel', $loggedUser->getHotel())
            ->setMaxResults(5)
            ->setFirstResult($offset);

        if (!empty($column) and !empty($sort)) {
            $result = $users->orderBy('user.'.$column, $sort)
                ->getQuery()->execute();

            return $result;
        }

        return $users->getQuery()->execute();
    }

    /**
     * @param User  $loggedUser
     * @param mixed $hotelId
     *
     * @return int
     */
    public function getUsersPagesNumberFromOwnerHotel(User $loggedUser, $hotelId)
    {
        $usersCount = $this->createQueryBuilder('user')
            ->innerJoin('user.hotel', 'hotel')
            ->where('hotel.owner = :owner')
            ->andWhere('hotel.hotelId = :hotelId')
            ->setParameter('owner', $loggedUser)
            ->setParameter('hotelId', $hotelId)
            ->getQuery()->execute();

        return ceil(count($usersCount) / 5);
    }

    /**
     * @param User  $loggedUser
     * @param mixed $offset
     * @param mixed $column
     * @param mixed $sort
     * @param mixed $hotelId
     *
     * @return array
     */
    public function paginateAndSortUsersFromOwnerHotel(User $loggedUser, $offset, $column, $sort, $hotelId)
    {
        $users = $this->createQueryBuilder('user')
            ->innerJoin('user.hotel', 'hotel')
            ->where('hotel.owner = :owner')
            ->andWhere('hotel.hotelId = :hotelId')
            ->setParameter('owner', $loggedUser)
            ->setParameter('hotelId', $hotelId)
            ->setFirstResult($offset)
            ->setMaxResults(5);

        if (!empty($column) && !empty($sort)) {
            $result = $users->orderBy('user.'.$column, $sort)
                ->getQuery()->execute();

            return $result;
        }

        return $users->getQuery()->execute();
    }
}
